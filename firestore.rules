rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function isDoctor() {
      return getUserRole() == 'doctor';
    }
    
    function isPatient() {
      return getUserRole() == 'patient';
    }
    
    function isAdmin() {
      return getUserRole() == 'admin';
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read and write their own data
      allow read, write: if isAuthenticated() && isOwner(userId);
      
      // Doctors can read other doctor profiles (for referrals)
      allow read: if isAuthenticated() && isDoctor() && resource.data.role == 'doctor';
      
      // Patients can read doctor profiles (for appointments)
      allow read: if isAuthenticated() && isPatient() && resource.data.role == 'doctor';
      
      // Admins can read all users
      allow read: if isAuthenticated() && isAdmin();
      
      // Prevent role changes after creation
      allow update: if isAuthenticated() && 
                       isOwner(userId) && 
                       resource.data.role == request.resource.data.role;
    }
    
    // Appointments collection
    match /appointments/{appointmentId} {
      // Patients and doctors can read their own appointments
      allow read: if isAuthenticated() && 
                     (isOwner(resource.data.patientId) || 
                      isOwner(resource.data.doctorId));
      
      // Patients can create appointments
      allow create: if isAuthenticated() && 
                       isPatient() && 
                       isOwner(request.resource.data.patientId);
      
      // Doctors can update appointment status
      allow update: if isAuthenticated() && 
                       isDoctor() && 
                       isOwner(resource.data.doctorId) &&
                       // Only allow status updates
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['status', 'updatedAt', 'notes']);
      
      // Patients can cancel their own appointments
      allow update: if isAuthenticated() && 
                       isPatient() && 
                       isOwner(resource.data.patientId) &&
                       request.resource.data.status == 'cancelled';
      
      // Prevent deletion of appointments (for audit trail)
      allow delete: if false;
    }
    
    // Doctor availability collection
    match /doctor_availability/{docId} {
      // Anyone can read availability (for booking)
      allow read: if isAuthenticated();
      
      // Only the doctor can write their availability
      allow write: if isAuthenticated() && 
                      isDoctor() && 
                      isOwner(resource.data.doctorId);
    }
    
    // Specialties collection (read-only for users)
    match /specialties/{specialtyId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isAdmin();
    }
    
    // Reviews collection
    match /reviews/{reviewId} {
      // Anyone can read reviews
      allow read: if isAuthenticated();
      
      // Only patients can create reviews for their completed appointments
      allow create: if isAuthenticated() && 
                       isPatient() && 
                       isOwner(request.resource.data.patientId) &&
                       // Verify the appointment exists and is completed
                       exists(/databases/$(database)/documents/appointments/$(request.resource.data.appointmentId)) &&
                       get(/databases/$(database)/documents/appointments/$(request.resource.data.appointmentId)).data.status == 'completed';
      
      // Users can update/delete their own reviews
      allow update, delete: if isAuthenticated() && 
                               isOwner(resource.data.patientId);
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if isAuthenticated() && 
                     isOwner(resource.data.userId);
      
      // Users can update their own notifications (mark as read)
      allow update: if isAuthenticated() && 
                       isOwner(resource.data.userId) &&
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['isRead']);
      
      // System can create notifications (via Cloud Functions)
      allow create: if isAuthenticated();
      
      // Prevent deletion of notifications (for audit trail)
      allow delete: if false;
    }
    
    // Admin-only collections
    match /admin/{document=**} {
      allow read, write: if isAuthenticated() && isAdmin();
    }
    
    // Audit logs (write-only for system)
    match /audit_logs/{logId} {
      allow read: if isAuthenticated() && isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }
    
    // Chat messages (if implementing chat feature)
    match /chat_messages/{messageId} {
      allow read, write: if isAuthenticated() && 
                            (isOwner(resource.data.senderId) || 
                             isOwner(resource.data.receiverId));
    }
  }
}

// Storage rules for Firebase Storage
service firebase.storage {
  match /b/{bucket}/o {
    // Users can upload their own profile pictures
    match /profile_pictures/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Users can upload appointment-related documents
    match /appointment_documents/{appointmentId}/{allPaths=**} {
      allow read, write: if request.auth != null && 
                            (isOwnerOfAppointment(appointmentId));
    }
    
    // Helper function to check appointment ownership
    function isOwnerOfAppointment(appointmentId) {
      let appointment = firestore.get(/databases/(default)/documents/appointments/$(appointmentId));
      return request.auth.uid == appointment.data.patientId || 
             request.auth.uid == appointment.data.doctorId;
    }
    
    // Public assets (app icons, etc.)
    match /public/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null && 
                      request.auth.token.role == 'admin';
    }
  }
}
